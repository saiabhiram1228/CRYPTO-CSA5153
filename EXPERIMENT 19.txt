#include <stdio.h>
#include <stdint.h>
#include <stdlib.h>
#include <string.h>

#include <openssl/des.h>

void encryptDES_CBC(const char *input, const char *key, const char *iv, char *output) {
    DES_cblock desKey1, desKey2, desKey3, desIV;
    DES_key_schedule keySchedule1, keySchedule2, keySchedule3;

    // Set the keys
    memcpy(desKey1, key, 8);
    memcpy(desKey2, key + 8, 8);
    memcpy(desKey3, key + 16, 8);

    // Set the IV
    memcpy(desIV, iv, 8);

    // Set up the key schedules
    DES_set_key(&desKey1, &keySchedule1);
    DES_set_key(&desKey2, &keySchedule2);
    DES_set_key(&desKey3, &keySchedule3);

    // Initialize the previous block with the IV
    DES_cblock previousBlock;
    memcpy(previousBlock, desIV, 8);

    // Iterate through blocks
    for (int i = 0; i < strlen(input) / 8; i++) {
        DES_cblock inputBlock, outputBlock;

        // Copy the current block
        memcpy(inputBlock, input + i * 8, 8);

        // XOR with the previous ciphertext block (or IV for the first block)
        for (int j = 0; j < 8; j++) {
            inputBlock[j] ^= previousBlock[j];
        }

        // Encrypt the block with 3DES
        DES_ecb3_encrypt(&inputBlock, &outputBlock, &keySchedule1, &keySchedule2, &keySchedule3, DES_ENCRYPT);

        // Copy the ciphertext to the output
        memcpy(output + i * 8, outputBlock, 8);

        // Update the previous block
        memcpy(previousBlock, output + i * 8, 8);
    }
}

int main() {
    const char *plaintext = "abcdefghabcdefgh"; // 16 bytes (128 bits) plaintext
    const char *key = "0123456789abcdef0123456789abcdef"; // 24 bytes (192 bits) key
    const char *iv = "abcdefgh"; // 8 bytes (64 bits) IV

    char ciphertext[17]; // One extra byte for the null terminator

    // Encrypt using 3DES in CBC mode
    encryptDES_CBC(plaintext, key, iv, ciphertext);

    // Print the result
    printf("Plaintext: %s\n", plaintext);
    printf("Ciphertext: %s\n", ciphertext);

    return 0;
}
